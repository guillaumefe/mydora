<!DOCTYPE html>
<html lang="en">
<head>
<style>
    .add-article-container {
        background-color: var(--card-background);
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        overflow: hidden;
    }

    .form-header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .form-header:hover {
        background-color: var(--secondary-color);
    }

    .form-content {
        padding: 1.5rem;
        display: none;
    }

    .form-content.visible {
        display: block;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
    }

    .form-group select,
    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        font-size: 1rem;
        margin-top: 0.25rem;
    }

    .form-group textarea {
        min-height: 100px;
        resize: vertical;
    }

    .conditional-fields {
        padding-left: 1rem;
        border-left: 2px solid var(--primary-color);
        margin-top: 1rem;
        display: none;
    }

    .conditional-fields.visible {
        display: block;
    }

    .error-message {
        color: #dc2626;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: none;
    }

    .error-message.visible {
        display: block;
    }

    .regulation-links {
        margin: 0.5rem 0;
        font-size: 0.875rem;
        color: var(--secondary-color);
    }
   
    .regulation-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .regulation-header .checkbox {
        flex-shrink: 0;
        margin: 0;
    }

    .regulation-header .regulation-id {
        font-weight: bold;
    }

    .regulation-header .regulation-category {
        color: var(--primary-color);
        font-size: 0.875rem;
    }

    .regulation-content {
        margin-left: 0;  /* Supprime la marge qui pourrait causer un décalage */
    }

    .regulation-text {
        margin-bottom: 1rem;
    }

    .regulation-item {
        background: white;
    }    

        :root {
            --primary-color: #3b82f6;
            --secondary-color: #1d4ed8;
            --background-color: #f3f4f6;
            --card-background: #ffffff;
            --text-color: #1f2937;
            --border-color: #e5e7eb;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.5;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }

        .card {
            background-color: var(--card-background);
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 1rem;
        }

        .header {
            margin-bottom: 1.5rem;
        }

        .title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .compliance-rate {
            font-size: 1.25rem;
            color: var(--primary-color);
            font-weight: bold;
        }

        .search-container {
            margin-bottom: 1rem;
        }

        .input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            font-size: 1rem;
        }

        .button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 1rem;
            margin-right: 0.5rem;
        }

        .button:hover {
            background-color: var(--secondary-color);
        }

        .button.secondary {
            background-color: transparent;
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
        }

        .button.secondary:hover {
            background-color: var(--background-color);
        }

        .regulation-item {
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .regulation-header {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .checkbox {
            margin-right: 1rem;
        }

        .regulation-id {
            font-weight: bold;
            margin-right: 0.5rem;
        }

        .regulation-category {
            color: var(--primary-color);
            font-size: 0.875rem;
        }

        .regulation-text {
            margin-bottom: 1rem;
        }

        .actions-container {
            margin-top: 1rem;
        }

        .action-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background-color: var(--background-color);
            border-radius: 0.25rem;
            margin-bottom: 0.5rem;
        }

        .action-input-container {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .category-filter {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            cursor: pointer;
            background-color: var(--background-color);
        }

        .category-filter.active {
            background-color: var(--primary-color);
            color: white;
        }

        .save-status {
            font-size: 0.875rem;
            color: var(--primary-color);
            margin-left: 1rem;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .save-status.visible {
            opacity: 1;
        }
</style>
</head>
<body>
<title>DORA Compliance Tracker</title>
<div class="add-article-container">
    <div class="form-header" onclick="toggleForm()">
        <span>Ajouter un nouvel article</span>
        <span id="form-toggle">▼</span>
    </div>
    <div class="form-content" id="articleForm">
        <div class="form-group">
            <label for="articleCategory">Catégorie</label>
            <select id="articleCategory" class="input" onchange="toggleConditionalFields()">
                <option value="">Sélectionnez une catégorie</option>
                <option value="Level 1">Level 1</option>
                <option value="RTS">RTS</option>
                <option value="ITS">ITS</option>
            </select>
        </div>
       
        <div class="form-group">
            <label for="articleReference">Référence</label>
            <input type="text" id="articleReference" class="input" placeholder="ex: L1-1, RTS-1, ITS-1">
        </div>
       
        <div class="form-group">
            <label for="articleText">Texte de l'article</label>
            <textarea id="articleText" class="input" placeholder="Entrez le texte de l'article"></textarea>
        </div>

        <div class="conditional-fields" id="level1Fields">
            <div class="form-group">
                <label for="rtsLink">RTS associée(s)</label>
                <input type="text" id="rtsLink" class="input" placeholder="ex: RTS-1, RTS-2">
            </div>
            <div class="form-group">
                <label for="itsLink">ITS associée(s)</label>
                <input type="text" id="itsLink" class="input" placeholder="ex: ITS-1, ITS-2">
            </div>
        </div>

        <div class="conditional-fields" id="rtsItsFields">
            <div class="form-group">
                <label for="level1Link">Article Level 1 associé</label>
                <input type="text" id="level1Link" class="input" placeholder="ex: L1-1">
            </div>
        </div>

        <div class="error-message" id="formError"></div>
       
        <button class="button" onclick="addNewArticle()">Ajouter l'article</button>
    </div>
</div>

<div class="container">
    <div class="card header">
        <h1 class="title">Suivi de Conformité DORA</h1>
        <div class="compliance-rate"></div>
        <div class="search-container">
            <input type="text" class="input" id="searchInput" placeholder="Rechercher un article...">
        </div>
        <div class="filters" id="categoryFilters">
            <span class="category-filter active" data-category="all">Tous</span>
            <span class="category-filter" data-category="Level 1">Level 1</span>
            <span class="category-filter" data-category="RTS">RTS</span>
            <span class="category-filter" data-category="ITS">ITS</span>
        </div>
        <span class="save-status" id="saveStatus">Modifications sauvegardées</span>
    </div>
    <div id="regulationsList"></div>
</div>
<script>function renderLinks(article) {
    if (!article) return '';
   
    let linksHtml = '';
   
    if (article.category === 'Level 1') {
        // Check if rtsLinks exists and is an array before accessing length
        if (Array.isArray(article.rtsLinks) && article.rtsLinks.length > 0) {
            linksHtml += `
                <div class="regulation-links">
                    <div>RTS associées: ${article.rtsLinks.join(', ')}</div>
                </div>
            `;
        }
        // Check if itsLinks exists and is an array before accessing length
        if (Array.isArray(article.itsLinks) && article.itsLinks.length > 0) {
            linksHtml += `
                <div class="regulation-links">
                    <div>ITS associées: ${article.itsLinks.join(', ')}</div>
                </div>
            `;
        }
    } else if (article.category !== 'Level 1' && article.level1Link) {
        linksHtml += `
            <div class="regulation-links">
                Article Level 1 associé: ${article.level1Link}
            </div>
        `;
    }

    return linksHtml;
}</script>
<script>function renderActions(article) {
    if (!article || !Array.isArray(article.actions)) return '';
   
    return article.actions.map(action => `
        <div class="action-item">
            <span>${action.text}</span>
            <button class="button secondary"
                    onclick="removeAction('${article.id}', ${action.id})">
                Supprimer
            </button>
        </div>
    `).join('');
}</script>
<script>function renderRegulations() {
    const filteredRegs = filterRegulations();
    const regulationsList = document.getElementById('regulationsList');
    const complianceRate = document.querySelector('.compliance-rate');
   
    complianceRate.textContent = `Taux de conformité: ${calculateCompliance()}%`;
   
    if (!Array.isArray(filteredRegs) || filteredRegs.length === 0) {
        regulationsList.innerHTML = '<div>Aucune régulation trouvée</div>';
        return;
    }
   
    regulationsList.innerHTML = filteredRegs.map(reg => `
        <div class="regulation-item">
            <div class="regulation-header">
                <input type="checkbox"
                       class="checkbox"
                       ${reg.completed ? 'checked' : ''}
                >

                <span class="">Compliant</span>

            </div>
            <div class="regulation-content">
                <div class="regulation-text">
                    ${reg.text}
                </div>
                ${reg.fullPath ? `
                <div class="regulation-path">
                    <strong>Chemin complet:</strong> ${reg.fullPath}
                </div>
                ` : ''}
                ${renderLinks(reg)}
                <div class="actions-container">
                    <h4>Actions associées:</h4>
                    ${renderActions(reg)}
                    <div class="action-input-container">
                        <input type="text"
                               class="input"
                               id="action-input-${reg.id}"
                               placeholder="Nouvelle action..."
                        >
                        <button class="button"
                                onclick="addAction('${reg.id}', document.getElementById('action-input-${reg.id}').value)">
                            Ajouter
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}</script>
<script>function parseRequirementsFromText(text) {
    console.log('Texte reçu:', text);
   
    // Normaliser les retours à la ligne
    const lines = text.split(/\r?\n/);
    console.log('Lignes:', lines);
   
    const requirements = [];
    let parentChain = [];

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        const content = line.trim();
       
        // Ignorer les lignes vides
        if (!content) continue;
       
        // Calculer le niveau d'indentation
        const indentation = line.search(/\S|$/);
        const level = Math.floor(indentation / 2);
       
        console.log(`Ligne ${i}:`, { content, indentation, level });

        // Ajuster la chaîne des parents
        parentChain = parentChain.slice(0, level);
        parentChain[level] = content;
       
        console.log('Parent chain:', parentChain);

        // Vérifier si c'est une feuille
        const nextLine = lines[i + 1];
        const nextIndentation = nextLine ? nextLine.search(/\S|$/) : -1;
        const nextLevel = Math.floor(nextIndentation / 2);
        const isLeaf = i === lines.length - 1 || nextLevel <= level;

        if (isLeaf) {
            // Créer l'exigence avec le chemin complet
            const fullPath = parentChain.slice(0, level + 1).join('.');
            const requirement = {
                id: fullPath,
                originalText: content,
                level: level,
                parentChain: parentChain.slice(0, level)
            };
            console.log('Nouvelle exigence:', requirement);
            requirements.push(requirement);
        }
    }

    console.log('Toutes les exigences:', requirements);
    return requirements;
}

function addNewArticle() {
    const category = document.getElementById('articleCategory').value;
    const reference = document.getElementById('articleReference').value;
    const text = document.getElementById('articleText').value;

    console.log('Ajout article:', { category, reference, text });

    const parsedRequirements = parseRequirementsFromText(text);
    console.log('Exigences parsées:', parsedRequirements);

    // Création d'un article pour chaque exigence feuille
    parsedRequirements.forEach(req => {
        const articleId = `${reference}-${req.id}`;
        const article = {
            id: articleId,
            category: category,
            text: req.originalText,
            fullPath: req.id,
            parentChain: req.parentChain,
            rtsLinks: [],
            itsLinks: [],
            level1Link: '',
            actions: [],
            completed: false
        };

        if (category === 'Level 1') {
            article.rtsLinks = document.getElementById('rtsLink').value.split(',').map(s => s.trim()).filter(Boolean);
            article.itsLinks = document.getElementById('itsLink').value.split(',').map(s => s.trim()).filter(Boolean);
        } else if (category === 'RTS' || category === 'ITS') {
            article.level1Link = document.getElementById('level1Link').value.trim();
        }

        console.log('Nouvel article créé:', article);

        const existingIndex = regulations.findIndex(reg => reg.id === articleId);
        if (existingIndex !== -1) {
            regulations[existingIndex] = article;
        } else {
            regulations.push(article);
        }
    });

    console.log('Regulations après ajout:', regulations);
    renderRegulations();
    autoSave();
    resetArticleForm();
}

function filterRegulations() {
    console.log('Début filterRegulations, regulations:', regulations);
    if (!Array.isArray(regulations)) return [];
   
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const currentFilter = activeFilter || 'all';
   
    const filtered = regulations.filter(reg => {
        if (!reg) return false;
       
        // Vérifie si le texte correspond à la recherche
        const textMatch = reg.text && reg.text.toLowerCase().includes(searchTerm);
        // Vérifie si le chemin complet correspond à la recherche
        const pathMatch = reg.fullPath && reg.fullPath.toLowerCase().includes(searchTerm);
        // Vérifie si la catégorie correspond au filtre
        const categoryMatch = currentFilter === 'all' || reg.category === currentFilter;
       
        return (textMatch || pathMatch) && categoryMatch;
    });

    console.log('Résultat du filtre:', filtered);
    return filtered;
}

// Modifions initialRegulations pour avoir la bonne structure
const initialRegulations = [
    {
        id: 'L1-1',
        category: 'Level 1',
        requirements: [
            {
                id: "Article 1 - Objet et champ d'application",
                level: 0,
                children: []
            }
        ],
        rtsLinks: [],
        itsLinks: [],
        level1Link: '',
        actions: [],
        completed: false
    }
];

// Au début du script, avec les autres variables globales
let regulations = [...initialRegulations];
let searchTerm = '';
let activeFilter = 'all';  // Initialisation de activeFilter

function searchInRequirements(requirements, term) {
    if (!Array.isArray(requirements)) return false;
    return requirements.some(req =>
        req.id.toLowerCase().includes(term) ||
        (Array.isArray(req.children) && searchInRequirements(req.children, term))
    );
}

function renderRequirements(requirements) {
    if (!Array.isArray(requirements)) return '';
    return requirements.map(req => `
        <div class="regulation-text" style="margin-left: ${req.level * 20}px;">
            ${req.id}
            ${Array.isArray(req.children) && req.children.length > 0
                ? renderRequirements(req.children)
                : ''}
        </div>
    `).join('');
}

    // Initialisation
    document.addEventListener('DOMContentLoaded', () => {
        autoLoad();
        document.getElementById('searchInput').addEventListener('input', handleSearchInput);
        document.getElementById('categoryFilters').addEventListener('click', handleCategoryFilter);
        renderRegulations();
    });
   

    const autoSave = () => {
        localStorage.setItem('doraCompliance', JSON.stringify(regulations));
        const saveStatus = document.getElementById('saveStatus');
        saveStatus.classList.add('visible');
        setTimeout(() => {
            saveStatus.classList.remove('visible');
        }, 2000);
    };

    const autoLoad = () => {
        const savedState = localStorage.getItem('doraCompliance');
        if (savedState) {
            regulations = JSON.parse(savedState);
        }
    };

    const calculateCompliance = () => {
        const completedArticles = regulations.filter(reg =>
            reg.completed || reg.actions.length > 0
        ).length;
        return ((completedArticles / regulations.length) * 100).toFixed(1);
    };

    const handleSearchInput = (event) => {
        searchTerm = event.target.value;
        renderRegulations();
    };

    const handleCategoryFilter = (event) => {
        if (event.target.classList.contains('category-filter')) {
            document.querySelectorAll('.category-filter').forEach(filter =>
                filter.classList.remove('active')
            );
            event.target.classList.add('active');
            activeFilter = event.target.dataset.category;
            renderRegulations();
        }
    };

    const toggleCompletion = (regulationId) => {
        regulations = regulations.map(reg => {
            if (reg.id === regulationId) {
                return { ...reg, completed: !reg.completed };
            }
            return reg;
        });
        renderRegulations();
        autoSave();
    };

    const addAction = (regulationId, actionText) => {
        if (!actionText.trim()) return;
       
        regulations = regulations.map(reg => {
            if (reg.id === regulationId) {
                return {
                    ...reg,
                    actions: [...reg.actions, {
                        id: Date.now(),
                        text: actionText
                    }]
                };
            }
            return reg;
        });
        renderRegulations();
        autoSave();

        // Clear input field after adding action
        document.getElementById(`action-input-${regulationId}`).value = '';
    };

    const removeAction = (regulationId, actionId) => {
        regulations = regulations.map(reg => {
            if (reg.id === regulationId) {
                return {
                    ...reg,
                    actions: reg.actions.filter(action => action.id !== actionId)
                };
            }
            return reg;
        });
        renderRegulations();
        autoSave();
    };

    function getIndentationLevel(line) {
        let level = 0;
        while (line.startsWith(' ')) {
            level++;
            line = line.substring(1);
        }
        return level;
    }

    function validateArticle(article) {
        if (!article.category) return "La catégorie est requise";
        if (!article.id) return "La référence est requise";
        if (!article.requirements.length) return "Le texte de l'article est requis";

        // La validation des liens RTS/ITS n'est plus obligatoire
        return null;
    }

    function toggleForm() {
        const formContent = document.getElementById('articleForm');
        const formToggle = document.getElementById('form-toggle');
        formContent.classList.toggle('visible');
        formToggle.textContent = formContent.classList.contains('visible') ? '▲' : '▼';
    }

    function toggleConditionalFields() {
        const category = document.getElementById('articleCategory').value;
        const level1Fields = document.getElementById('level1Fields');
        const rtsItsFields = document.getElementById('rtsItsFields');

        level1Fields.classList.remove('visible');
        rtsItsFields.classList.remove('visible');

        if (category === 'Level 1') {
            level1Fields.classList.add('visible');
        } else if (category === 'RTS' || category === 'ITS') {
            rtsItsFields.classList.add('visible');
        }
    }

    function resetArticleForm() {
        document.getElementById('articleCategory').value = '';
        document.getElementById('articleReference').value = '';
        document.getElementById('articleText').value = '';
        document.getElementById('rtsLink').value = '';
        document.getElementById('itsLink').value = '';
        document.getElementById('level1Link').value = '';
        toggleConditionalFields();
    }

</script>
</body>
</html>
